<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
    http://mybatis.org/schema/mybatis-spring 
    http://mybatis.org/schema/mybatis-spring.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd  ">

    <!-- 注意！！任何bean的id都不要和DAO层的类重名，否则会造成mybatis自动创建实现bean失败 -->

    <!-- 该包下的类支持注解，表示会被当作{@code mybatis mapper}处理 配置了之后表示可以自动引入mapper类 -->
    <mybatis:scan base-package="com.aquatic.schedule.dao"/>

    <!--引入属性文件 -->
    <!-- <context:property-placeholder location="classpath:db.properties" /> -->
    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.aquatic.schedule.dao"/>
    </bean>

    <!--数据源1连接 -->
    <bean id="orderDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 指定连接数据库的驱动 -->
        <property name="driverClass" value="${order.jdbc.driverClass}"/>
        <!-- 指定连接数据库的URL -->
        <property name="jdbcUrl" value="${order.jdbc.url}"/>
        <!-- 指定连接数据库的用户名 -->
        <property name="user" value="${order.jdbc.username}"/>
        <!-- 指定连接数据库的密码 -->
        <property name="password" value="${order.jdbc.password}"/>
        <!-- 指定连接池中保留的最大连接数. Default:15 -->
        <property name="maxPoolSize" value="${order.jdbc.maxPoolSize}"/>
        <!-- 指定连接池中保留的最小连接数 -->
        <property name="minPoolSize" value="${order.jdbc.minPoolSize}"/>
        <!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
        <property name="initialPoolSize" value="${order.jdbc.initialPoolSize}"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
        <property name="maxIdleTime" value="${order.jdbc.maxIdleTime}"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
        <property name="acquireIncrement" value="${order.jdbc.acquireIncrement}"/>
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.
            如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
        <property name="maxStatements" value="${order.jdbc.maxStatements}"/>
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
        <property name="idleConnectionTestPeriod" value="${order.jdbc.idleConnectionTestPeriod}"/>
    </bean>

    <!--数据源2连接 -->
    <bean id="payDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 指定连接数据库的驱动 -->
        <property name="driverClass" value="${pay.jdbc.driverClass}"/>
        <!-- 指定连接数据库的URL -->
        <property name="jdbcUrl" value="${pay.jdbc.url}"/>
        <!-- 指定连接数据库的用户名 -->
        <property name="user" value="${pay.jdbc.username}"/>
        <!-- 指定连接数据库的密码 -->
        <property name="password" value="${pay.jdbc.password}"/>
        <!-- 指定连接池中保留的最大连接数. Default:15 -->
        <property name="maxPoolSize" value="${pay.jdbc.maxPoolSize}"/>
        <!-- 指定连接池中保留的最小连接数 -->
        <property name="minPoolSize" value="${pay.jdbc.minPoolSize}"/>
        <!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
        <property name="initialPoolSize" value="${pay.jdbc.initialPoolSize}"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
        <property name="maxIdleTime" value="${pay.jdbc.maxIdleTime}"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
        <property name="acquireIncrement" value="${pay.jdbc.acquireIncrement}"/>
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.
            如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
        <property name="maxStatements" value="${pay.jdbc.maxStatements}"/>
        <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
        <property name="idleConnectionTestPeriod" value="${pay.jdbc.idleConnectionTestPeriod}"/>
    </bean>

    <!-- 自定义的动态数据源 -->
    <!-- <bean id="dynamicDataSource" class="com.aquatic.pay.web.datasource.DynamicDataSource"> -->
    <!-- <property name="targetDataSources"> -->
    <!-- <map key-type="java.lang.String"> -->
    <!-- <entry value-ref="orderDataSource" key="orderDataSource"></entry> -->
    <!-- <entry value-ref="payDataSource" key="payDataSource"></entry> -->
    <!-- </map> -->
    <!-- </property> -->
    <!-- <property name="defaultTargetDataSource" ref="orderDataSource" /> -->
    <!-- </bean> -->

    <!-- mybatis配置 -->
    <!-- 使用spring的会话管理 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="orderDataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"
        />
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- 使用spring的事务管理 -->
    <!-- 只能针对单一数据源 -->
    <bean name="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="orderDataSource"></property>
    </bean>

    <!-- 根据DAO层的包路径切换数据源 -->
    <!-- 不支持分布式多数据源的事务 -->
    <!-- <aop:config> -->
    <!-- <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor"> -->
    <!-- <aop:pointcut id="useOrderData" -->
    <!-- expression="execution(* com.aquatic.pay.dao.orderdata.*.*(..))" /> -->
    <!-- <aop:pointcut id="usePayData" -->
    <!-- expression="execution(* com.aquatic.pay.dao.paydata.*.*(..))" /> -->
    <!-- <aop:before pointcut-ref="useOrderData" method="setdataSourceOrder"
        /> -->
    <!-- <aop:before pointcut-ref="usePayData" method="setdataSourcePay" /> -->
    <!-- </aop:aspect> -->
    <!-- </aop:config> -->

    <!-- 启用对事务注解的支持 -->
    <!-- <tx:annotation-driven transaction-manager="jtaTransactionManager" /> -->

    <!-- jotm实例实现分布式事务 -->
    <!-- <bean id="jotm" class="com.aquatic.pay.web.datasource.jotm.JotmFactoryBean"> -->
    <!-- <property name="defaultTimeout" value="500000" /> -->
    <!-- </bean> -->

    <!-- JTA事务管理器 -->
    <!-- <bean id="jtaTransactionManager" -->
    <!-- class="org.springframework.transaction.jta.JtaTransactionManager"> -->
    <!-- <property name="userTransaction" ref="jotm" /> -->
    <!-- </bean> -->
</beans>